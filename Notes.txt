Next JS

npx create-next-app@latest

Only the root layout can contain <html> and <body> tags.

It will support both Client side and server side rendering

When component defined into the nextJs when we mentioned 
'use client' at the top the component it is client side rendering so we can use => react and react hooks
When plain component is there without any use client that is server side rendering we can't use react and react hooks

So when to use server side and client side components? 

Server side component             client side component
fetch data from backend           add interactivity and event listeners (onclick, onchange etc)
access backend resources          use state and lifecycle methods (usestate, usereducer, useeffect)
keep sensitvie info on the        use custom hooks that depend on state effects 
server(access tokens, api keys)   use react class components 
keep large denpendencies on the server
/ reduce client-side js

When we create layout.tsx file in subfolder of app => that should be a reusable component for that subfolder

if loading or error screen we have defined inside a subfolder with layout means that should be available for tht subfolder
Layouts
A layout is UI that is shared between multiple pages. On navigation, layouts preserve state, remain interactive, and do not re-render. Layouts can also be nested.

You can define a layout by default exporting a React component from a layout.js file. The component should accept a children prop that will be populated with a child layout (if it exists) or a child page during rendering.

The top-most layout is called the Root Layout. 

This required layout is shared across all pages in an application. Root layouts must contain html and body tags.

Any route segment can optionally define its own Layout. These layouts will be shared across all pages in that segment.
Layouts in a route are nested by default. Each parent layout wraps child layouts below it using the React children prop.
You can use Route Groups to opt specific route segments in and out of shared layouts.

Layouts are Server Components by default but can be set to a Client Component.

Layouts can fetch data. View the Data Fetching section for more information.

Passing data between a parent layout and its children is not possible. 

However, you can fetch the same data in a route more than once, and React will automatically dedupe the requests without affecting performance.

Layouts do not have access to the route segments below itself. To access all route segments, you can use useSelectedLayoutSegment or useSelectedLayoutSegments in a Client Component.

.js, .jsx, or .tsx file extensions can be used for Layouts.

A layout.js and page.js file can be defined in the same folder. The layout will wrap the page.

The app directory must include a root layout.

The root layout must define <html> and <body> tags since Next.js does not automatically create them.

You can use the built-in SEO support to manage <head> HTML elements, for example, the <title> element.

You can use route groups to create multiple root layouts. See an example here.

The root layout is a Server Component by default and can not be set to a Client Component.

IMPORTANT***********
React renders Server Components into a special data format called the React Server Component Payload (RSC Payload), which includes references to Client Components.
Next.js uses the RSC Payload and Client Component JavaScript instructions to render HTML for the route on the server.

The RSC Payload is a compact binary representation of the rendered React Server Components tree. It's used by React on the client to update the browser's DOM. The RSC Payload contains:

The rendered result of Server Components
Placeholders for where Client Components should be rendered and references to their JavaScript files
Any props passed from a Server Component to a Client Component

Data fetching in next.js 
Server side rendering
static site generation
Incremental Static generation
